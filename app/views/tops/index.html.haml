.topPage
  .listWrapper
    - @lists.each do |list|
      .list
        .list_header
          %h2.list_header_title= list.title
          .list_header_action
            = link_to content_tag(:i, '', class: 'fas fa-trash'), list, method: :delete, data: { confirm: "#{list.title}を削除して大丈夫ですか？" }
            = link_to(content_tag(:i, '', class: 'fas fa-pen'), edit_list_path(list))
        .cardWrapper
          - list.cards.each do |card|
            = link_to list_card_path(list, card), class:"cardDetail_link" do
              .card
                %h3.card_title= card.title
                - if card.memo.size > 0
                  .card_detail.is-exist
                    %span
                      %i.fas.fa-bars
            .moveTimer
              %i.fas.fa-stopwatch#timer_icon
          .addCard
            %i.far.fa-plus-square
            = link_to "さらにカードを追加", new_list_card_path(list), class: "addCard_link"
  .timer_container
    %div#timer 00:00.000
    .controls
      %btn#start Start
      %btn#stop Stop
      %btn#reset Reset

-# JSストップウォッチ
:javascript
  const timer = document.getElementById('timer');
  const start = document.getElementById('start');
  const stop = document.getElementById('stop');
  const reset = document.getElementById('reset');

  let startTime;
  let timeoutId;
  let elapsedTime = 0

  function countUp() {
    const d = new Date(Date.now() - startTime + elapsedTime);
    const m = String(d.getMinutes()).padStart(2, '0');
    const s = String(d.getSeconds()).padStart(2, '0');
    const ms = String(d.getMilliseconds()).padStart(3, '0');
    timer.textContent = `${m}:${s}.${ms}`;

    timeoutId = setTimeout(() => {
      countUp();
    }, 10);
  }
  
  function setButtonStateInitial() {
    start.disabled = false;
    stop.disabled = true;
    reset.disabled = true;
  }
  function setButtonStateRunning() {
    start.disabled = true;
    stop.disabled = false;
    reset.disabled = true;
  }
  function setButtonStateStopped() {
    start.disabled = false;
    stop.disabled = true;
    reset.disabled = false;
  }

  setButtonStateInitial();

  start.addEventListener('click', () => {
    setButtonStateRunning();
    startTime = Date.now();
    countUp();
  });

  stop.addEventListener('click', () => {
    setButtonStateStopped();
    clearTimeout(timeoutId);
    elapsedTime += Date.now() - startTime;
  });

  reset.addEventListener('click', () => {
    setButtonStateInitial();
    timer.textContent = "00:00.000"
    elapsedTime = 0;
  });